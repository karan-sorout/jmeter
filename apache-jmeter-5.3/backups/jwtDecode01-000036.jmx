<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">var token=eyJraWQiOiItNDkyNzg4NDI5IiwieDV0IjoieUtsQ0lYVEhCZ1ZKc0FPZm1UeFV1bFNzbTBRIiwiYWxnIjoiUlMyNTYifQ.eyJleHAiOjE2MDc2MzcxNzYsIm5iZiI6MTYwNzYzMzU3NiwianRpIjoiZmNjYTUwYmEtYzcxNy00Y2RhLTgwZjctMDZjYjRmODVjZTYwIiwiaXNzIjoiaHR0cHM6Ly9zaXQtb3JnLWN1cml0eS5zZWMuYmFuay5pa2Fuby9-IiwiYXVkIjoiaXBheS13ZWJhcHAiLCJzdWIiOiIxOWUxMTM4NzY5ZjY5NWE5ZjcxYTE5ZWUwMzk3Mzg4ZThjNjNhMjczOTBlMDY4YjFmMjdkMWIzZjc2MWNhYWU4IiwiYXV0aF90aW1lIjoxNjA3NjMzNTU3LCJpYXQiOjE2MDc2MzM1NzYsInB1cnBvc2UiOiJpZCIsImF0X2hhc2giOiIwMkMtSW5GUGFYT0RIV0Y0bnozcjZBIiwiYmlydGhkYXRlIjoiMTk4MS0wMS0wMSIsImFtciI6InVybjpzZTpjdXJpdHk6YXV0aGVudGljYXRpb246aHRtbC1mb3JtOmlwYXktd2ViLW1mYS1sb2dpbiIsImdyb3VwcyI6W3siZGlzcGxheSI6Im51bGwifV0sInByZWZlcnJlZF91c2VybmFtZSI6ImthcmFuLnNpbmdoMUBtYWlsaW5hdG9yLmNvbSIsInRpdGxlIjoiTXIiLCJnaXZlbl9uYW1lIjoiS2FyYW4iLCJzaWQiOiI3UnpuZVdsVFlVWHZmYnFnIiwiYWNyIjoidXJuOnNlOmN1cml0eTphdXRoZW50aWNhdGlvbjpodG1sLWZvcm06aXBheS13ZWItbWZhLWxvZ2luIiwiZGVsZWdhdGlvbl9pZCI6IjgxMmNjYzNiLWY1MWUtNDYyZi05ZGM0LWZlZWUzN2E4NzNlOSIsInNfaGFzaCI6IlJiSk9Fc3FvWDM3ZUdQX19Bby1fcnciLCJhenAiOiJpcGF5LXdlYmFwcCIsInBob25lX251bWJlciI6Iis0NDc1MzcxNzczNjkiLCJjb3VudGVyLXBhcnR5LWlkIjoiSUtQQzAyNTEzMzU5IiwiZmFtaWx5X25hbWUiOiJTaW5naCJ9.H9vTNueWm9xFl-5yM2_qxpDXyU_ckCZYs8ULZGJkIkJx0jyFbKbOEmzeVhovd7GLz3WP_ck8Z1x0YqlcxGqO7OE6wza8dShPGIZeWVR07DeJZX2ZNFhCpvkuQ_iXe3kyLlNIs_xlFCcAqWAE5boBvutJq0CoR_xlcgCUSax38HqQqf-zVxv8CDeCqro0rPIFBvciOoUW7Lm5tm1EKlQIbXkKgA1889hubNgESXLsLOlQhf3yxbqDYh87AUY9l5j8kcsOvwhwdjcrqNgYUDpQkeFyzRtP7Glu0MFgtlrQihh7-jEaszm4MKgIXu3LkpZURIZvYJOPN-StGpwYcJ0_xH7scF9uav-7FbgGE2JOEeTSIGjzXqYN1wCn-WMIfyr1-NfJip9ZQoD37YDRUKx0Qd_s9TEMBmbNUB_lIuV6Dqpj_m2CM2KbMsxu6w9AWXfx884sswTHT5IMg5a1jZUKV7ywfqWq5CZYFg3tOiBcDvr7_Zd9nbjxDf__5erBzUFS7yMk4MW98x6zLJNTg30bwVlFX5uonq35AKmf0J0cebhLfA5ymDQywGKvX81PCoIe-WQZHEve6O3SUvHBDHfvUPe7Ki17uRkOa7qjRvhEFKPo3ZUntskiEtMJZsXPZYNXtGOzblGJYxK-bChSPdXIouQT6WxbbDjDRl02XkPfi9Q;
//var jwt_payload;
//char var = vars.get(&quot;token&quot;);
//char var token1 = ${token};
function parseJwt (token) {
    var base64Url = token.split(&apos;.&apos;)[1];
    var base64 = base64Url.replace(/-/g, &apos;+&apos;).replace(/_/g, &apos;/&apos;);
   var jsonPayload = decodeURIComponent(atob(base64).split(&apos;&apos;).map(function(c) {
        return &apos;%&apos; + (&apos;00&apos; + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(&apos;&apos;));

    var jwt_payload = JSON.parse(jsonPayload);

}

parseJwt(token);
log.info(&quot;jwt_payload_log=&quot;+jwt_payload);
vars.put(&quot;jwt_payload=&quot;,jwt_payload);
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </JSR223Sampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="110541305">token</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="773683071">
                <stringProp name="1532388126">eyJraWQiOiItNDkyNzg4NDI5IiwieDV0IjoieUtsQ0lYVEhCZ1ZKc0FPZm1UeFV1bFNzbTBRIiwiYWxnIjoiUlMyNTYifQ.eyJleHAiOjE2MDc2MzcxNzYsIm5iZiI6MTYwNzYzMzU3NiwianRpIjoiZmNjYTUwYmEtYzcxNy00Y2RhLTgwZjctMDZjYjRmODVjZTYwIiwiaXNzIjoiaHR0cHM6Ly9zaXQtb3JnLWN1cml0eS5zZWMuYmFuay5pa2Fuby9-IiwiYXVkIjoiaXBheS13ZWJhcHAiLCJzdWIiOiIxOWUxMTM4NzY5ZjY5NWE5ZjcxYTE5ZWUwMzk3Mzg4ZThjNjNhMjczOTBlMDY4YjFmMjdkMWIzZjc2MWNhYWU4IiwiYXV0aF90aW1lIjoxNjA3NjMzNTU3LCJpYXQiOjE2MDc2MzM1NzYsInB1cnBvc2UiOiJpZCIsImF0X2hhc2giOiIwMkMtSW5GUGFYT0RIV0Y0bnozcjZBIiwiYmlydGhkYXRlIjoiMTk4MS0wMS0wMSIsImFtciI6InVybjpzZTpjdXJpdHk6YXV0aGVudGljYXRpb246aHRtbC1mb3JtOmlwYXktd2ViLW1mYS1sb2dpbiIsImdyb3VwcyI6W3siZGlzcGxheSI6Im51bGwifV0sInByZWZlcnJlZF91c2VybmFtZSI6ImthcmFuLnNpbmdoMUBtYWlsaW5hdG9yLmNvbSIsInRpdGxlIjoiTXIiLCJnaXZlbl9uYW1lIjoiS2FyYW4iLCJzaWQiOiI3UnpuZVdsVFlVWHZmYnFnIiwiYWNyIjoidXJuOnNlOmN1cml0eTphdXRoZW50aWNhdGlvbjpodG1sLWZvcm06aXBheS13ZWItbWZhLWxvZ2luIiwiZGVsZWdhdGlvbl9pZCI6IjgxMmNjYzNiLWY1MWUtNDYyZi05ZGM0LWZlZWUzN2E4NzNlOSIsInNfaGFzaCI6IlJiSk9Fc3FvWDM3ZUdQX19Bby1fcnciLCJhenAiOiJpcGF5LXdlYmFwcCIsInBob25lX251bWJlciI6Iis0NDc1MzcxNzczNjkiLCJjb3VudGVyLXBhcnR5LWlkIjoiSUtQQzAyNTEzMzU5IiwiZmFtaWx5X25hbWUiOiJTaW5naCJ9.H9vTNueWm9xFl-5yM2_qxpDXyU_ckCZYs8ULZGJkIkJx0jyFbKbOEmzeVhovd7GLz3WP_ck8Z1x0YqlcxGqO7OE6wza8dShPGIZeWVR07DeJZX2ZNFhCpvkuQ_iXe3kyLlNIs_xlFCcAqWAE5boBvutJq0CoR_xlcgCUSax38HqQqf-zVxv8CDeCqro0rPIFBvciOoUW7Lm5tm1EKlQIbXkKgA1889hubNgESXLsLOlQhf3yxbqDYh87AUY9l5j8kcsOvwhwdjcrqNgYUDpQkeFyzRtP7Glu0MFgtlrQihh7-jEaszm4MKgIXu3LkpZURIZvYJOPN-StGpwYcJ0_xH7scF9uav-7FbgGE2JOEeTSIGjzXqYN1wCn-WMIfyr1-NfJip9ZQoD37YDRUKx0Qd_s9TEMBmbNUB_lIuV6Dqpj_m2CM2KbMsxu6w9AWXfx884sswTHT5IMg5a1jZUKV7ywfqWq5CZYFg3tOiBcDvr7_Zd9nbjxDf__5erBzUFS7yMk4MW98x6zLJNTg30bwVlFX5uonq35AKmf0J0cebhLfA5ymDQywGKvX81PCoIe-WQZHEve6O3SUvHBDHfvUPe7Ki17uRkOa7qjRvhEFKPo3ZUntskiEtMJZsXPZYNXtGOzblGJYxK-bChSPdXIouQT6WxbbDjDRl02XkPfi9Q</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info (jsonPayload);</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
